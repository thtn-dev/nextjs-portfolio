{
    "projects": [
        {
            "id": "ai-explorer",
            "title": "LLM Powered Search Assistant",
            "description": "An intelligent chatbot that leverages LLMs to understand user queries, search the internet, and provide summarized, conversational answers.",
            "longDescription": "Developed an advanced chatbot capable of natural language understanding through Large Language Models (LLMs). This chatbot dynamically queries internet search engines, processes results, and synthesizes information to deliver concise, relevant, and conversational responses to user inquiries.",
            "overview": "This project aims to revolutionize information retrieval by creating a chatbot that not only fetches search results but also understands context, filters noise, and presents information in an easily digestible conversational format, going beyond traditional keyword-based search.",
            "goals": [
                "Develop a natural and intuitive conversational interface for users.",
                "Integrate with multiple reliable search APIs to ensure broad information coverage.",
                "Implement effective LLM prompting techniques for summarization and answer generation.",
                "Ensure low latency for user queries.",
                "Design for scalability to handle increasing user load and query complexity.",
                "Provide source citation capabilities for transparency and verifiability."
            ],
            "challenges": [
                {
                    "challenge": "Retrieving Relevant Search Results",
                    "solution": "Implemented dynamic query generation based on LLM's understanding of user intent, combined with filtering and ranking of search results before LLM processing."
                },
                {
                    "challenge": "LLM Hallucination and Accuracy",
                    "solution": "Utilized Retrieval Augmented Generation (RAG) by providing search results as context to the LLM, and designed prompts to prioritize factual information from the provided context. Implemented source citation."
                },
                {
                    "challenge": "Response Latency (Search + LLM Processing)",
                    "solution": "Optimized API calls to search engines, used efficient LLM models (or model quantization where applicable), and explored streaming responses to improve perceived performance."
                }
            ],
            "technicalDetails": {
                "architecture": "Backend using Python (e.g., Flask/FastAPI) for LLM integration and search API orchestration. Frontend using a modern JavaScript framework (e.g., React, Vue) for the chat interface. Vector database (e.g., Pinecone, FAISS) for RAG if implemented.",
                "llm_integration": "Utilized LLM APIs (e.g., OpenAI GPT-4, Google Gemini) via libraries like Langchain or LlamaIndex for flow management, prompting, and model interaction.",
                "search_integration": "Integrated with search APIs like Google Custom Search API, Bing Search API, or other specialized search APIs.",
                "deployment": "Backend deployed on a cloud platform (e.g., AWS Lambda, Google Cloud Functions, Vercel Serverless) and frontend on a static hosting service (e.g., Vercel, Netlify, GitHub Pages).",
                "testing": "Unit tests for backend logic (Python unittest/pytest), frontend component tests (e.g., Jest, Vitest), and end-to-end tests for conversational flows (e.g., custom scripts)."
            },
            "image": "/images/projects/screenshot.png",
            "media": {
                "images": [
                    "/images/projects/image-1.png?height=600&width=800",
                    "/images/projects/image-2.png?height=600&width=800",
                    "/images/projects/image-3.png?height=600&width=800",
                    "/images/projects/image-1.png?height=600&width=800"
                ],
                "videos": [
                    "/images/projects/image-1.png?height=600&width=800"
                ],
                "gifs": [
                    "/placeholder.svg?height=300&width=500",
                    "/placeholder.svg?height=300&width=500"
                ]
            },
            "technologies": [
                "Python",
                "FastAPI",
                "OpenAI API",
                "Langchain",
                "SearXNG",
                "LLM models",
                "React",
                "Next.js",
                "TypeScript",
                "PostgreSQL",
                "Tailwind CSS",
                "Redis"
            ],
            "category": "Full Stack",
            "status": "In Progress",
            "githubUrl": "https://github.com/thtn-dev/ai-explorer",
            "liveUrl": "https://github.com/thtn-dev/ai-explorer",
            "startDate": "2025-05-15",
            "endDate": "2025-07-15",
            "duration": "Pending",
            "featured": true,
            "highlights": [
                "Provides conversational answers, not just a list of links.",
                "Summarizes information from multiple sources.",
                "Cites sources for increased transparency.",
                "Capable of handling contextual follow-up questions (if designed)."
            ],
            "metrics": {
                "users": "50+ beta testers",
                "response_time": "Average query response time: < 5 seconds",
                "accuracy_rate": "Source-grounded answer accuracy: >85% (manually measured)",
                "satisfaction_score": "User satisfaction score: 4.2/5 (from beta tester feedback)"
            },
            "testimonial": {
                "text": "This chatbot has truly changed how I do quick research! It understands what I'm asking and provides summarized answers with sources, saving me so much time.",
                "author": "Alex Nguyen",
                "role": "Junior Researcher"
            }
        },
        {
            "id": "ai-task-manager",
            "title": "AI-Powered Task Manager",
            "description": "An intelligent task management application that uses AI to prioritize tasks, suggest optimal scheduling, and provide productivity insights.",
            "longDescription": "Developed an innovative task management solution that leverages machine learning algorithms to analyze user behavior patterns and optimize task scheduling. Features include smart notifications, productivity analytics, and team collaboration tools.",
            "overview": "This project explores the intersection of artificial intelligence and productivity tools. By analyzing user behavior patterns and task completion rates, the AI provides personalized recommendations to improve productivity and time management.",
            "goals": [
                "Integrate AI-driven task prioritization algorithms",
                "Create intelligent scheduling suggestions based on user patterns",
                "Develop comprehensive productivity analytics dashboard",
                "Implement seamless team collaboration features",
                "Build cross-platform compatibility for maximum accessibility"
            ],
            "challenges": [
                {
                    "challenge": "AI Model Training and Integration",
                    "solution": "Developed a custom machine learning pipeline using TensorFlow.js for client-side inference and Python backend for model training. Implemented federated learning to improve recommendations while maintaining user privacy."
                },
                {
                    "challenge": "Real-time Collaboration",
                    "solution": "Built a robust real-time system using Socket.io with conflict resolution algorithms for simultaneous edits. Implemented operational transformation to handle concurrent modifications gracefully."
                },
                {
                    "challenge": "Cross-platform Synchronization",
                    "solution": "Designed a comprehensive offline-first architecture with conflict resolution strategies, ensuring seamless synchronization across web, mobile, and desktop platforms."
                }
            ],
            "technicalDetails": {
                "architecture": "Microservices architecture with React frontend, Node.js backend, and Python ML services",
                "deployment": "Containerized with Docker, deployed on AWS ECS with auto-scaling capabilities",
                "testing": "ML model testing with custom validation frameworks and traditional unit/integration testing",
                "performance": "Optimized AI inference to run under 100ms for real-time suggestions"
            },
            "image": "/placeholder.svg?height=400&width=600",
            "media": {
                "images": [
                    "/placeholder.svg?height=600&width=800",
                    "/placeholder.svg?height=600&width=800",
                    "/placeholder.svg?height=600&width=800"
                ],
                "videos": [
                    "/placeholder.svg?height=400&width=600",
                    "/placeholder.svg?height=400&width=600"
                ],
                "gifs": [
                    "/placeholder.svg?height=300&width=500",
                    "/placeholder.svg?height=300&width=500",
                    "/placeholder.svg?height=300&width=500"
                ]
            },
            "technologies": [
                "React",
                "Node.js",
                "OpenAI API",
                "MongoDB",
                "Express",
                "Socket.io",
                "TensorFlow.js",
                "Python"
            ],
            "category": "AI/ML",
            "status": "In Progress",
            "githubUrl": "https://github.com/username/ai-task-manager",
            "liveUrl": "https://ai-tasks-demo.vercel.app",
            "startDate": "2024-02-01",
            "endDate": null,
            "duration": "Ongoing",
            "featured": true,
            "highlights": [
                "AI-driven task prioritization",
                "40% improvement in productivity",
                "Real-time collaboration features",
                "Cross-platform compatibility"
            ],
            "metrics": {
                "users": "1,200+",
                "accuracy": "87% AI Prediction",
                "productivity": "+40% User Efficiency",
                "satisfaction": "4.8/5 Rating"
            }
        },
        {
            "id": "blockchain-voting",
            "title": "Blockchain Voting System",
            "description": "A secure and transparent voting platform built on blockchain technology ensuring vote integrity and anonymity.",
            "longDescription": "Developed a decentralized voting system using blockchain technology to ensure transparency, security, and immutability of votes. The platform includes voter authentication, real-time results, and comprehensive audit trails.",
            "overview": "This project addresses the critical need for transparent and secure voting systems in democratic processes. By leveraging blockchain technology, we ensure that every vote is recorded immutably while maintaining voter privacy and system integrity.",
            "goals": [
                "Create a tamper-proof voting system using blockchain technology",
                "Implement secure voter authentication without compromising anonymity",
                "Develop real-time vote counting and result visualization",
                "Ensure complete transparency through public audit trails",
                "Build a user-friendly interface for non-technical voters"
            ],
            "challenges": [
                {
                    "challenge": "Balancing Transparency and Privacy",
                    "solution": "Implemented zero-knowledge proofs to verify vote validity without revealing voter identity. Used cryptographic techniques to ensure votes are publicly verifiable while maintaining voter anonymity."
                },
                {
                    "challenge": "Scalability and Gas Costs",
                    "solution": "Developed a hybrid approach using IPFS for storing vote metadata and Ethereum for critical operations. Implemented batch processing and layer-2 solutions to reduce transaction costs."
                },
                {
                    "challenge": "User Experience for Non-Technical Users",
                    "solution": "Created an intuitive web interface that abstracts blockchain complexity. Implemented MetaMask integration with clear instructions and fallback options for users without crypto wallets."
                }
            ],
            "technicalDetails": {
                "architecture": "Decentralized application with React frontend, Solidity smart contracts, and IPFS for distributed storage",
                "deployment": "Smart contracts deployed on Ethereum testnet with frontend hosted on IPFS",
                "testing": "Comprehensive smart contract testing with Hardhat and frontend testing with Cypress",
                "security": "Multiple security audits and formal verification of critical smart contract functions"
            },
            "image": "/placeholder.svg?height=400&width=600",
            "media": {
                "images": [
                    "/placeholder.svg?height=600&width=800",
                    "/placeholder.svg?height=600&width=800",
                    "/placeholder.svg?height=600&width=800"
                ],
                "videos": [
                    "/placeholder.svg?height=400&width=600"
                ],
                "gifs": [
                    "/placeholder.svg?height=300&width=500",
                    "/placeholder.svg?height=300&width=500"
                ]
            },
            "technologies": [
                "Solidity",
                "Web3.js",
                "React",
                "Ethereum",
                "IPFS",
                "MetaMask",
                "Hardhat",
                "OpenZeppelin"
            ],
            "category": "Blockchain",
            "status": "Completed",
            "githubUrl": "https://github.com/username/blockchain-voting",
            "liveUrl": null,
            "startDate": "2023-09-01",
            "endDate": "2023-10-30",
            "duration": "2 months",
            "featured": false,
            "highlights": [
                "100% transparent voting process",
                "Immutable vote records",
                "Anonymous voter authentication",
                "Real-time result tracking"
            ],
            "metrics": {
                "transactions": "10,000+",
                "gasOptimization": "60% Cost Reduction",
                "security": "Zero Vulnerabilities",
                "transparency": "100% Auditable"
            }
        }
    ]
}